// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: apps/store/rpc/store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	AddStore(ctx context.Context, in *AddStoreReq, opts ...grpc.CallOption) (*StoreInfo, error)
	UpdateStore(ctx context.Context, in *StoreInfo, opts ...grpc.CallOption) (*StoreInfo, error)
	DeleteStore(ctx context.Context, in *DeleteStoreReq, opts ...grpc.CallOption) (*DeleteStoreResp, error)
	GetStore(ctx context.Context, in *GetStoreReq, opts ...grpc.CallOption) (*GetStoreResp, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) AddStore(ctx context.Context, in *AddStoreReq, opts ...grpc.CallOption) (*StoreInfo, error) {
	out := new(StoreInfo)
	err := c.cc.Invoke(ctx, "/store.Store/AddStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateStore(ctx context.Context, in *StoreInfo, opts ...grpc.CallOption) (*StoreInfo, error) {
	out := new(StoreInfo)
	err := c.cc.Invoke(ctx, "/store.Store/UpdateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) DeleteStore(ctx context.Context, in *DeleteStoreReq, opts ...grpc.CallOption) (*DeleteStoreResp, error) {
	out := new(DeleteStoreResp)
	err := c.cc.Invoke(ctx, "/store.Store/DeleteStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) GetStore(ctx context.Context, in *GetStoreReq, opts ...grpc.CallOption) (*GetStoreResp, error) {
	out := new(GetStoreResp)
	err := c.cc.Invoke(ctx, "/store.Store/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	AddStore(context.Context, *AddStoreReq) (*StoreInfo, error)
	UpdateStore(context.Context, *StoreInfo) (*StoreInfo, error)
	DeleteStore(context.Context, *DeleteStoreReq) (*DeleteStoreResp, error)
	GetStore(context.Context, *GetStoreReq) (*GetStoreResp, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) AddStore(context.Context, *AddStoreReq) (*StoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStore not implemented")
}
func (UnimplementedStoreServer) UpdateStore(context.Context, *StoreInfo) (*StoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedStoreServer) DeleteStore(context.Context, *DeleteStoreReq) (*DeleteStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedStoreServer) GetStore(context.Context, *GetStoreReq) (*GetStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_AddStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).AddStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/AddStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).AddStore(ctx, req.(*AddStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/UpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateStore(ctx, req.(*StoreInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/DeleteStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).DeleteStore(ctx, req.(*DeleteStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetStore(ctx, req.(*GetStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStore",
			Handler:    _Store_AddStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _Store_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _Store_DeleteStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _Store_GetStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/store/rpc/store.proto",
}

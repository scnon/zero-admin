// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: product.proto

package product_client

import (
	"context"

	"xlife/apps/product/rpc/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCateReq     = product.AddCateReq
	AddProductReq  = product.AddProductReq
	CateInfo       = product.CateInfo
	DeleCateResp   = product.DeleCateResp
	DeleteCateReq  = product.DeleteCateReq
	GetCateReq     = product.GetCateReq
	GetCateResp    = product.GetCateResp
	GetProductReq  = product.GetProductReq
	GetProductResp = product.GetProductResp
	ProductInfo    = product.ProductInfo
	SkuInfo        = product.SkuInfo

	Product interface {
		AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*ProductInfo, error)
		UpdateProduct(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*ProductInfo, error)
		DeleteProduct(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*ProductInfo, error)
		GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error)
		AddCate(ctx context.Context, in *AddCateReq, opts ...grpc.CallOption) (*CateInfo, error)
		UpdateCate(ctx context.Context, in *CateInfo, opts ...grpc.CallOption) (*CateInfo, error)
		DeleteCate(ctx context.Context, in *DeleteCateReq, opts ...grpc.CallOption) (*DeleCateResp, error)
		GetCate(ctx context.Context, in *GetCateReq, opts ...grpc.CallOption) (*GetCateResp, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

func (m *defaultProduct) AddProduct(ctx context.Context, in *AddProductReq, opts ...grpc.CallOption) (*ProductInfo, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.AddProduct(ctx, in, opts...)
}

func (m *defaultProduct) UpdateProduct(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*ProductInfo, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

func (m *defaultProduct) DeleteProduct(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*ProductInfo, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

func (m *defaultProduct) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

func (m *defaultProduct) AddCate(ctx context.Context, in *AddCateReq, opts ...grpc.CallOption) (*CateInfo, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.AddCate(ctx, in, opts...)
}

func (m *defaultProduct) UpdateCate(ctx context.Context, in *CateInfo, opts ...grpc.CallOption) (*CateInfo, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.UpdateCate(ctx, in, opts...)
}

func (m *defaultProduct) DeleteCate(ctx context.Context, in *DeleteCateReq, opts ...grpc.CallOption) (*DeleCateResp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.DeleteCate(ctx, in, opts...)
}

func (m *defaultProduct) GetCate(ctx context.Context, in *GetCateReq, opts ...grpc.CallOption) (*GetCateResp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.GetCate(ctx, in, opts...)
}

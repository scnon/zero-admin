// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: customer.proto

package customer_client

import (
	"context"

	"xlife/apps/customer/rpc/customer"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCustomerReq     = customer.AddCustomerReq
	CustomerInfo       = customer.CustomerInfo
	DeleteCustomerReq  = customer.DeleteCustomerReq
	DeleteCustomerResp = customer.DeleteCustomerResp
	GetCustomerReq     = customer.GetCustomerReq
	GetCustomerResp    = customer.GetCustomerResp

	Customer interface {
		AddCustomer(ctx context.Context, in *AddCustomerReq, opts ...grpc.CallOption) (*CustomerInfo, error)
		UpdateCustomer(ctx context.Context, in *CustomerInfo, opts ...grpc.CallOption) (*CustomerInfo, error)
		DeleteCustomer(ctx context.Context, in *DeleteCustomerReq, opts ...grpc.CallOption) (*DeleteCustomerResp, error)
		GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerResp, error)
	}

	defaultCustomer struct {
		cli zrpc.Client
	}
)

func NewCustomer(cli zrpc.Client) Customer {
	return &defaultCustomer{
		cli: cli,
	}
}

func (m *defaultCustomer) AddCustomer(ctx context.Context, in *AddCustomerReq, opts ...grpc.CallOption) (*CustomerInfo, error) {
	client := customer.NewCustomerClient(m.cli.Conn())
	return client.AddCustomer(ctx, in, opts...)
}

func (m *defaultCustomer) UpdateCustomer(ctx context.Context, in *CustomerInfo, opts ...grpc.CallOption) (*CustomerInfo, error) {
	client := customer.NewCustomerClient(m.cli.Conn())
	return client.UpdateCustomer(ctx, in, opts...)
}

func (m *defaultCustomer) DeleteCustomer(ctx context.Context, in *DeleteCustomerReq, opts ...grpc.CallOption) (*DeleteCustomerResp, error) {
	client := customer.NewCustomerClient(m.cli.Conn())
	return client.DeleteCustomer(ctx, in, opts...)
}

func (m *defaultCustomer) GetCustomer(ctx context.Context, in *GetCustomerReq, opts ...grpc.CallOption) (*GetCustomerResp, error) {
	client := customer.NewCustomerClient(m.cli.Conn())
	return client.GetCustomer(ctx, in, opts...)
}

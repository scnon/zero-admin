// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: merchant.proto

package merchant

import (
	"context"

	"xlife/apps/merchant/rpc/merchant"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddMerchantReq     = merchant.AddMerchantReq
	DeleteMerchantReq  = merchant.DeleteMerchantReq
	DeleteMerchantResp = merchant.DeleteMerchantResp
	MerchantInfo       = merchant.MerchantInfo
	MerchantListReq    = merchant.MerchantListReq
	MerchantListResp   = merchant.MerchantListResp

	Merchant interface {
		AddMerchant(ctx context.Context, in *AddMerchantReq, opts ...grpc.CallOption) (*MerchantInfo, error)
		UpdateMerchant(ctx context.Context, in *MerchantInfo, opts ...grpc.CallOption) (*MerchantInfo, error)
		DeleteMerchant(ctx context.Context, in *DeleteMerchantReq, opts ...grpc.CallOption) (*DeleteMerchantResp, error)
		GetMerchant(ctx context.Context, in *MerchantListReq, opts ...grpc.CallOption) (*MerchantListResp, error)
	}

	defaultMerchant struct {
		cli zrpc.Client
	}
)

func NewMerchant(cli zrpc.Client) Merchant {
	return &defaultMerchant{
		cli: cli,
	}
}

func (m *defaultMerchant) AddMerchant(ctx context.Context, in *AddMerchantReq, opts ...grpc.CallOption) (*MerchantInfo, error) {
	client := merchant.NewMerchantClient(m.cli.Conn())
	return client.AddMerchant(ctx, in, opts...)
}

func (m *defaultMerchant) UpdateMerchant(ctx context.Context, in *MerchantInfo, opts ...grpc.CallOption) (*MerchantInfo, error) {
	client := merchant.NewMerchantClient(m.cli.Conn())
	return client.UpdateMerchant(ctx, in, opts...)
}

func (m *defaultMerchant) DeleteMerchant(ctx context.Context, in *DeleteMerchantReq, opts ...grpc.CallOption) (*DeleteMerchantResp, error) {
	client := merchant.NewMerchantClient(m.cli.Conn())
	return client.DeleteMerchant(ctx, in, opts...)
}

func (m *defaultMerchant) GetMerchant(ctx context.Context, in *MerchantListReq, opts ...grpc.CallOption) (*MerchantListResp, error) {
	client := merchant.NewMerchantClient(m.cli.Conn())
	return client.GetMerchant(ctx, in, opts...)
}

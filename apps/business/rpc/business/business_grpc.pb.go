// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: apps/business/rpc/business.proto

package business

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessClient interface {
	AddBusiness(ctx context.Context, in *AddBusinessReq, opts ...grpc.CallOption) (*BusinessInfo, error)
	UpdateBusiness(ctx context.Context, in *BusinessInfo, opts ...grpc.CallOption) (*BusinessInfo, error)
	DeleteBusiness(ctx context.Context, in *DeleteBusinessReq, opts ...grpc.CallOption) (*DeleteBusinessResp, error)
	GetBusiness(ctx context.Context, in *GetBusinessReq, opts ...grpc.CallOption) (*GetBusinessResp, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) AddBusiness(ctx context.Context, in *AddBusinessReq, opts ...grpc.CallOption) (*BusinessInfo, error) {
	out := new(BusinessInfo)
	err := c.cc.Invoke(ctx, "/business.Business/AddBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) UpdateBusiness(ctx context.Context, in *BusinessInfo, opts ...grpc.CallOption) (*BusinessInfo, error) {
	out := new(BusinessInfo)
	err := c.cc.Invoke(ctx, "/business.Business/UpdateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) DeleteBusiness(ctx context.Context, in *DeleteBusinessReq, opts ...grpc.CallOption) (*DeleteBusinessResp, error) {
	out := new(DeleteBusinessResp)
	err := c.cc.Invoke(ctx, "/business.Business/DeleteBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) GetBusiness(ctx context.Context, in *GetBusinessReq, opts ...grpc.CallOption) (*GetBusinessResp, error) {
	out := new(GetBusinessResp)
	err := c.cc.Invoke(ctx, "/business.Business/GetBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility
type BusinessServer interface {
	AddBusiness(context.Context, *AddBusinessReq) (*BusinessInfo, error)
	UpdateBusiness(context.Context, *BusinessInfo) (*BusinessInfo, error)
	DeleteBusiness(context.Context, *DeleteBusinessReq) (*DeleteBusinessResp, error)
	GetBusiness(context.Context, *GetBusinessReq) (*GetBusinessResp, error)
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (UnimplementedBusinessServer) AddBusiness(context.Context, *AddBusinessReq) (*BusinessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusiness not implemented")
}
func (UnimplementedBusinessServer) UpdateBusiness(context.Context, *BusinessInfo) (*BusinessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (UnimplementedBusinessServer) DeleteBusiness(context.Context, *DeleteBusinessReq) (*DeleteBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (UnimplementedBusinessServer) GetBusiness(context.Context, *GetBusinessReq) (*GetBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusiness not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_AddBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).AddBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.Business/AddBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).AddBusiness(ctx, req.(*AddBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.Business/UpdateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).UpdateBusiness(ctx, req.(*BusinessInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.Business/DeleteBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).DeleteBusiness(ctx, req.(*DeleteBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_GetBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).GetBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business.Business/GetBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).GetBusiness(ctx, req.(*GetBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBusiness",
			Handler:    _Business_AddBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _Business_UpdateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _Business_DeleteBusiness_Handler,
		},
		{
			MethodName: "GetBusiness",
			Handler:    _Business_GetBusiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/business/rpc/business.proto",
}

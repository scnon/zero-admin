// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: product.proto

package server

import (
	"context"

	"xlife/apps/product/rpc/internal/logic"
	"xlife/apps/product/rpc/internal/svc"
	"xlife/apps/product/rpc/product"
)

type ProductServer struct {
	svcCtx *svc.ServiceContext
	product.UnimplementedProductServer
}

func NewProductServer(svcCtx *svc.ServiceContext) *ProductServer {
	return &ProductServer{
		svcCtx: svcCtx,
	}
}

func (s *ProductServer) AddProduct(ctx context.Context, in *product.AddProductReq) (*product.ProductInfo, error) {
	l := logic.NewAddProductLogic(ctx, s.svcCtx)
	return l.AddProduct(in)
}

func (s *ProductServer) UpdateProduct(ctx context.Context, in *product.ProductInfo) (*product.ProductInfo, error) {
	l := logic.NewUpdateProductLogic(ctx, s.svcCtx)
	return l.UpdateProduct(in)
}

func (s *ProductServer) DeleteProduct(ctx context.Context, in *product.ProductInfo) (*product.ProductInfo, error) {
	l := logic.NewDeleteProductLogic(ctx, s.svcCtx)
	return l.DeleteProduct(in)
}

func (s *ProductServer) GetProduct(ctx context.Context, in *product.GetProductReq) (*product.GetProductResp, error) {
	l := logic.NewGetProductLogic(ctx, s.svcCtx)
	return l.GetProduct(in)
}

func (s *ProductServer) AddCate(ctx context.Context, in *product.AddCateReq) (*product.CateInfo, error) {
	l := logic.NewAddCateLogic(ctx, s.svcCtx)
	return l.AddCate(in)
}

func (s *ProductServer) UpdateCate(ctx context.Context, in *product.CateInfo) (*product.CateInfo, error) {
	l := logic.NewUpdateCateLogic(ctx, s.svcCtx)
	return l.UpdateCate(in)
}

func (s *ProductServer) DeleteCate(ctx context.Context, in *product.DeleteCateReq) (*product.DeleCateResp, error) {
	l := logic.NewDeleteCateLogic(ctx, s.svcCtx)
	return l.DeleteCate(in)
}

func (s *ProductServer) GetCate(ctx context.Context, in *product.GetCateReq) (*product.GetCateResp, error) {
	l := logic.NewGetCateLogic(ctx, s.svcCtx)
	return l.GetCate(in)
}

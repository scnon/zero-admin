// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: auth.proto

package user

import (
	"context"

	"xlife/apps/auth/rpc/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddDeptReq      = auth.AddDeptReq
	AddDeptResp     = auth.AddDeptResp
	AddMenuReq      = auth.AddMenuReq
	AddMenuResp     = auth.AddMenuResp
	AddRoleReq      = auth.AddRoleReq
	AddRoleResp     = auth.AddRoleResp
	AddUserReq      = auth.AddUserReq
	AddUserResp     = auth.AddUserResp
	CasbinCheckReq  = auth.CasbinCheckReq
	CasbinCheckResp = auth.CasbinCheckResp
	DeleteDeptReq   = auth.DeleteDeptReq
	DeleteDeptResp  = auth.DeleteDeptResp
	DeleteMenuReq   = auth.DeleteMenuReq
	DeleteMenuResp  = auth.DeleteMenuResp
	DeleteRoleReq   = auth.DeleteRoleReq
	DeleteRoleResp  = auth.DeleteRoleResp
	DeleteUserReq   = auth.DeleteUserReq
	DeleteUserResp  = auth.DeleteUserResp
	DeptData        = auth.DeptData
	DeptListReq     = auth.DeptListReq
	DeptListResp    = auth.DeptListResp
	GetMenuReq      = auth.GetMenuReq
	GetMenuResp     = auth.GetMenuResp
	LoginReq        = auth.LoginReq
	LoginResp       = auth.LoginResp
	MenuData        = auth.MenuData
	MenuListReq     = auth.MenuListReq
	MenuListResp    = auth.MenuListResp
	RefreshReq      = auth.RefreshReq
	RoleData        = auth.RoleData
	RoleListReq     = auth.RoleListReq
	RoleListResp    = auth.RoleListResp
	RoleMenuIdsReq  = auth.RoleMenuIdsReq
	RoleMenuIdsResp = auth.RoleMenuIdsResp
	UpdateDeptReq   = auth.UpdateDeptReq
	UpdateDeptResp  = auth.UpdateDeptResp
	UpdateMenuReq   = auth.UpdateMenuReq
	UpdateMenuResp  = auth.UpdateMenuResp
	UpdateRoleReq   = auth.UpdateRoleReq
	UpdateRoleResp  = auth.UpdateRoleResp
	UpdateUserReq   = auth.UpdateUserReq
	UpdateUserResp  = auth.UpdateUserResp
	UserData        = auth.UserData
	UserListReq     = auth.UserListReq
	UserListResp    = auth.UserListResp
	UserRoleIdsReq  = auth.UserRoleIdsReq
	UserRoleIdsResp = auth.UserRoleIdsResp

	User interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*LoginResp, error)
		AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
		DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
		UserRoleIds(ctx context.Context, in *UserRoleIdsReq, opts ...grpc.CallOption) (*UserRoleIdsResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewUserClient(m.cli.Conn())
	return client.Refresh(ctx, in, opts...)
}

func (m *defaultUser) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	client := auth.NewUserClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	client := auth.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := auth.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := auth.NewUserClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultUser) UserRoleIds(ctx context.Context, in *UserRoleIdsReq, opts ...grpc.CallOption) (*UserRoleIdsResp, error) {
	client := auth.NewUserClient(m.cli.Conn())
	return client.UserRoleIds(ctx, in, opts...)
}

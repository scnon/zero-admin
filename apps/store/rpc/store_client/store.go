// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: store.proto

package store_client

import (
	"context"

	"xlife/apps/store/rpc/store"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddStoreReq     = store.AddStoreReq
	DeleteStoreReq  = store.DeleteStoreReq
	DeleteStoreResp = store.DeleteStoreResp
	GetStoreReq     = store.GetStoreReq
	GetStoreResp    = store.GetStoreResp
	StoreInfo       = store.StoreInfo

	Store interface {
		AddStore(ctx context.Context, in *AddStoreReq, opts ...grpc.CallOption) (*StoreInfo, error)
		UpdateStore(ctx context.Context, in *StoreInfo, opts ...grpc.CallOption) (*StoreInfo, error)
		DeleteStore(ctx context.Context, in *DeleteStoreReq, opts ...grpc.CallOption) (*DeleteStoreResp, error)
		GetStore(ctx context.Context, in *GetStoreReq, opts ...grpc.CallOption) (*GetStoreResp, error)
	}

	defaultStore struct {
		cli zrpc.Client
	}
)

func NewStore(cli zrpc.Client) Store {
	return &defaultStore{
		cli: cli,
	}
}

func (m *defaultStore) AddStore(ctx context.Context, in *AddStoreReq, opts ...grpc.CallOption) (*StoreInfo, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.AddStore(ctx, in, opts...)
}

func (m *defaultStore) UpdateStore(ctx context.Context, in *StoreInfo, opts ...grpc.CallOption) (*StoreInfo, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.UpdateStore(ctx, in, opts...)
}

func (m *defaultStore) DeleteStore(ctx context.Context, in *DeleteStoreReq, opts ...grpc.CallOption) (*DeleteStoreResp, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.DeleteStore(ctx, in, opts...)
}

func (m *defaultStore) GetStore(ctx context.Context, in *GetStoreReq, opts ...grpc.CallOption) (*GetStoreResp, error) {
	client := store.NewStoreClient(m.cli.Conn())
	return client.GetStore(ctx, in, opts...)
}

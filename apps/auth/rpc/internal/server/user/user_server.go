// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: auth.proto

package server

import (
	"context"

	"xlife/apps/auth/rpc/auth"
	"xlife/apps/auth/rpc/internal/logic/user"
	"xlife/apps/auth/rpc/internal/svc"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	auth.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Login(ctx context.Context, in *auth.LoginReq) (*auth.LoginResp, error) {
	l := userlogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) Refresh(ctx context.Context, in *auth.RefreshReq) (*auth.LoginResp, error) {
	l := userlogic.NewRefreshLogic(ctx, s.svcCtx)
	return l.Refresh(in)
}

func (s *UserServer) AddUser(ctx context.Context, in *auth.AddUserReq) (*auth.AddUserResp, error) {
	l := userlogic.NewAddUserLogic(ctx, s.svcCtx)
	return l.AddUser(in)
}

func (s *UserServer) DeleteUser(ctx context.Context, in *auth.DeleteUserReq) (*auth.DeleteUserResp, error) {
	l := userlogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServer) UpdateUser(ctx context.Context, in *auth.UpdateUserReq) (*auth.UpdateUserResp, error) {
	l := userlogic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServer) UserList(ctx context.Context, in *auth.UserListReq) (*auth.UserListResp, error) {
	l := userlogic.NewUserListLogic(ctx, s.svcCtx)
	return l.UserList(in)
}

func (s *UserServer) UserRoleIds(ctx context.Context, in *auth.UserRoleIdsReq) (*auth.UserRoleIdsResp, error) {
	l := userlogic.NewUserRoleIdsLogic(ctx, s.svcCtx)
	return l.UserRoleIds(in)
}
